/*
Copyright Â© 2022 NAME HERE <EMAIL ADDRESS>

*/
package cmd

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"

	diff "github.com/meoconbatu/diffdecoding/lib"

	"github.com/spf13/cobra"
)

var (
	iFile, oFile string
	iJsonFile    string
	noColor      bool
	version      = "dev"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "diffdecoding",
	Args:  cobra.NoArgs,
	Short: "diffdecoding is a tool to decode and diff value in user_data_base64 attribute on aws_instance, generated by 'terraform plan'.",
	Long: `diffdecoding is a tool to decode and diff value in user_data_base64 attribute on aws_instance, generated by 'terraform plan'.
If values are rendered from cloud-init data source, decode encoded content (if exists) before diff.`,
	Version: version,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		if iFile == "" && iJsonFile == "" {
			return errors.New("must set one flags in the group [input json]; none of [input json] were set")
		}
		return nil
	},
	RunE: rootCmdExec,
}

func rootCmdExec(cmd *cobra.Command, args []string) error {
	var buf bytes.Buffer
	var err error
	d := diff.New()
	if iFile != "" {
		err = diffFn(iFile, &buf, d.PlanChange)
	} else if iJsonFile != "" {
		err = diffFn(iJsonFile, &buf, d.PlanJSON)
	}
	if err != nil {
		return err
	}
	if oFile != "" {
		os.WriteFile(oFile, buf.Bytes(), 0644)
	} else {
		fmt.Fprint(os.Stdout, buf.String())
	}
	return nil
}
func diffFn(fileName string, w io.Writer, fn func(r io.Reader, w io.Writer, noColor bool) error) error {
	f, err := os.Open(fileName)
	if err != nil {
		return err
	}
	return fn(bufio.NewReader(f), w, noColor)
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	cobra.CheckErr(rootCmd.Execute())
}

func init() {
	rootCmdFlags(rootCmd)
}

func rootCmdFlags(cmd *cobra.Command) {
	cmd.Flags().StringVarP(&iFile, "input", "i", "", "Read input from the given path")
	cmd.Flags().StringVar(&iJsonFile, "json", "", "Read input json from the given path")
	cmd.MarkFlagsMutuallyExclusive("input", "json")

	cmd.Flags().StringVarP(&oFile, "output", "o", "", "Write output to the given path. If not specified, print output to console")
	cmd.Flags().BoolVar(&noColor, "no-color", false, "If specified, output won't contain any color")
}
